#Importing Library
%matplotlib inline
from ipywidgets import interactive
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
import numpy as np


#Lorenz system for 3D Catesian Coordinates system
def fx(x,y,z,t,s):
    dxdt=s*(y-x)
    return dxdt

def fy(x,y,z,t,r):
    dydt=x*(r-z)-y
    return dydt

def fz(x,y,z,t,b):
    dzdt=x*y-b*z
    return dzdt
    
    

#To perform of Runge-Kutta Method, we need term k1, k2, k3, k4 for each dimensional axis (x, y, z)
def RungeKutta4(x,y,z,fx,fy,fz,t,h,s,r,b):
    #Working for k1
    k1x = h*fx(x,y,z,t,s)
    k1y = h*fy(x,y,z,t,r)
    k1z = h*fz(x,y,z,t,b)

    #Working for k2
    k2x = h*fx(x+k1x/2,y+k1y/2,z+k1z/2,t+h/2,s)
    k2y = h*fy(x+k1x/2,y+k1y/2,z+k1z/2,t+h/2,r)
    k2z = h*fz(x+k1x/2,y+k1y/2,z+k1z/2,t+h/2,b)
    
    
    #Working for k3
    k3x = h*fx(x+k2x/2,y+k2y/2,z+k2z/2,t+h/2,s)
    k3y = h*fy(x+k2x/2,y+k2y/2,z+k2z/2,t+h/2,r)
    k3z = h*fz(x+k2x/2,y+k2y/2,z+k2z/2,t+h/2,b)

    #Working for k3\4
    k4x = h*fx(x+k3x,y+k3y,z+k3z,t+h,s)
    k4y = h*fy(x+k3x,y+k3y,z+k3z,t+h,r)
    k4z = h*fz(x+k3x,y+k3y,z+k3z,t+h,b)

    #Return in the form of general equation for 3D
    return x+(k1x+2*k2x+2*k3x+k4x)/6, y+(k1y+2*k2y+2*k3y+k4y)/6, z+(k1z+2*k2z+2*k3z+k4z)/6


def sim(sigma, beta, rho, t):
  #Defining parametric values
  
  tIn   = 0.        #Initial step value
  tFin  = float(t)  #Final step value
  h     = 0.01      #Step increment value
  totalSteps = int(np.floor((tFin-tIn)/h))    #Calculation of total number of steps

  #Generate arrays of complete 0 value
  t  = totalSteps * [0.0]
  x = totalSteps * [0.0]
  y = totalSteps * [0.0]
  z = totalSteps * [0.0]
  s = sigma
  b = beta
  r = rho
  x[0],y[0],z[0],t[0] = 1., 1., 1., 0.  #Defining initial values for Lorenz System

  #Iterations of Runge-Kutta 4th-Order Method to solve for Lorenz Model
  for i in range(1, totalSteps):
    x[i],y[i],z[i] = RungeKutta4(x[i-1],y[i-1],z[i-1], fx,fy,fz, t[i-1], h, s,r,b)

  
  fig = plt.figure(figsize = (10,10))
  ax = plt.axes(projection='3d')
  ax.plot3D(x, y, z, label = "Lorenz 3D Solution")
  ax.set_title('Simulation of Lorenz System')

  # Set axes label
  ax.set_xlabel('x', labelpad=20)
  ax.set_ylabel('y', labelpad=20)
  ax.set_zlabel('z', labelpad=20)
  plt.show()


interactive(sim, sigma = (0,50.0,0.1), beta = (0,10.0,0.1), rho = (0, 50.0, 0.1), t = (0, 60.00, 0.01))
